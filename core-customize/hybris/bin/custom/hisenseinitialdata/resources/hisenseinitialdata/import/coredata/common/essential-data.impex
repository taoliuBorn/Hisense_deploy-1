# -----------------------------------------------------------------------
# Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
# -----------------------------------------------------------------------
# Import essential data for the Accelerator
#
# Includes:
# * Languages
# * Currencies
# * Titles
# * Vendors
# * Warehouses
# * Supported Credit/Debit cards
# * User Groups
# * DistanceUnits for Storelocator
# * MediaFolders
# * MediaFormats
# * Tax & Tax Groups
# * Jobs

# Languages
INSERT_UPDATE Language;isocode[unique=true];fallbackLanguages(isocode);active[default=true]
;en;;;


# Currencies
INSERT_UPDATE Currency;isocode[unique=true];conversion;digits;symbol
;AUD;1.4;2;$

# SiteMap Language Currencies
INSERT_UPDATE SiteMapLanguageCurrency;&siteMapLanguageCurrency;language(isoCode)[unique=true];currency(isocode)[unique=true];
;enAud;en;AUD


# Vendor
INSERT_UPDATE Vendor;code[unique=true];name
;default;Default Vendor
;hisense;

INSERT Warehouse;code[unique=true];name;vendor(code)[default=default, forceWrite=true];default[default=true, forceWrite=true]
"#% beforeEach:
import de.hybris.platform.core.Registry;
import de.hybris.platform.ordersplitting.model.WarehouseModel;
String warehouseCode = line.get(Integer.valueOf(1));
WarehouseModel warehouse;
try
{
    warehouse = Registry.getApplicationContext().getBean(""warehouseService"").getWarehouseForCode(warehouseCode);
}
catch (Exception e)
{
    warehouse = null;
}
if (warehouse != null)
{
    line.clear();
}"
;default;Default Warehouse;
;warehouse_s;Warehouse South;hisense;
;warehouse_e;Warehouse East;hisense;
;warehouse_w;Warehouse West;hisense;
;warehouse_n;Warehouse North;hisense;

# Disable preview for email pages
UPDATE CMSPageType;code[unique=true];previewDisabled
;EmailPage;true

# Titles
INSERT_UPDATE Title;code[unique=true]
;mr
;mrs
;miss
;ms
;dr
;rev

# Media Folders
INSERT_UPDATE MediaFolder;qualifier[unique=true];path[unique=true]
;images;images
;email-body;email-body
;email-attachments;email-attachments
;documents;documents

# Media formats
INSERT_UPDATE MediaFormat;qualifier[unique=true]
;1200Wx1200H
;515Wx515H
;365Wx246H
;300Wx300H
;96Wx96H
;65Wx65H
;30Wx30H
;mobile
;tablet
;desktop
;widescreen

# Tax & Tax Groups
INSERT_UPDATE UserTaxGroup;code[unique=true]
;au-taxes

INSERT_UPDATE ProductTaxGroup;code[unique=true]
;au-vat-full
;au-vat-half
;au-sales-tax-full

INSERT_UPDATE Tax;code[unique=true];value;currency(isocode)
;au-vat-full;20
;au-vat-half;10
;au-sales-tax-full;10

INSERT_UPDATE ServicelayerJob;code[unique=true];springId[unique=true]
;cartRemovalJob;cartRemovalJob
;siteMapMediaJob;siteMapMediaJob

#promotion-preview-module
INSERT_UPDATE DroolsKIEModule;name[unique=true];mvnGroupId;mvnArtifactId;mvnVersion;ruleType(code);active;version;
"#%beforeEach:
import de.hybris.platform.core.Registry;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.apache.commons.lang3.StringUtils;
import de.hybris.platform.util.Config;

Logger LOG = LoggerFactory.getLogger(""ImpExImportReader"");
extensionNames = Registry.getCurrentTenant().getTenantSpecificExtensionNames();
extensionName = ""promotionengineservices"";
if(!extensionNames.contains(extensionName))
{
	templateId = line.get(1);
	LOG.info(""DroolsKIEModule [{}] was skipped because the extension [{}] is not included in the setup"", templateId, extensionName);
	line.clear();
}
"
                             ;promotions-preview-module;hybris-rules;promotions-preview;1.0.0;PROMOTION;true;-1;

INSERT_UPDATE DroolsKIEModule;name[unique=true];allowedTargets(name)
"#%beforeEach:
import de.hybris.platform.core.Registry;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.apache.commons.lang3.StringUtils;
import de.hybris.platform.util.Config;

Logger LOG = LoggerFactory.getLogger(""ImpExImportReader"");
extensionNames = Registry.getCurrentTenant().getTenantSpecificExtensionNames();
extensionName = ""promotionengineservices"";
if(!extensionNames.contains(extensionName))
{
	templateId = line.get(1);
	LOG.info(""DroolsKIEModule [{}] was skipped because the extension [{}] is not included in the setup"", templateId, extensionName);
	line.clear();
}
"
                             ;promotions-preview-module;promotions-module

INSERT_UPDATE DroolsKIEBase;name[unique=true];kieModule(name)[unique=true];equalityBehavior(code);eventProcessingMode(code)
"#%beforeEach:
import de.hybris.platform.core.Registry;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.apache.commons.lang3.StringUtils;
import de.hybris.platform.util.Config;

Logger LOG = LoggerFactory.getLogger(""ImpExImportReader"");
extensionNames = Registry.getCurrentTenant().getTenantSpecificExtensionNames();
extensionName = ""promotionengineservices"";
if(!extensionNames.contains(extensionName))
{
	templateId = line.get(1);
	LOG.info(""DroolsKIEBase [{}] was skipped because the extension [{}] is not included in the setup"", templateId, extensionName);
	line.clear();
}
"
                           ;promotions-preview-base;promotions-preview-module;EQUALITY;STREAM

INSERT_UPDATE DroolsKIESession;name[unique=true];kieBase(name)[unique=true];sessionType(code)
"#%beforeEach:
import de.hybris.platform.core.Registry;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.apache.commons.lang3.StringUtils;
import de.hybris.platform.util.Config;

Logger LOG = LoggerFactory.getLogger(""ImpExImportReader"");
extensionNames = Registry.getCurrentTenant().getTenantSpecificExtensionNames();
extensionName = ""promotionengineservices"";
if(!extensionNames.contains(extensionName))
{
	templateId = line.get(1);
	LOG.info(""DroolsKIESession [{}] was skipped because the extension [{}] is not included in the setup"", templateId, extensionName);
	line.clear();
}
"
                              ;promotions-preview-session;promotions-preview-base;STATEFUL

INSERT_UPDATE DroolsRuleEngineContext;name[unique=true];kieSession(name);ruleFiringLimit
"#%beforeEach:
import de.hybris.platform.core.Registry;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.apache.commons.lang3.StringUtils;
import de.hybris.platform.util.Config;

Logger LOG = LoggerFactory.getLogger(""ImpExImportReader"");
extensionNames = Registry.getCurrentTenant().getTenantSpecificExtensionNames();
extensionName = ""promotionengineservices"";
if(!extensionNames.contains(extensionName))
{
	templateId = line.get(1);
	LOG.info(""DroolsRuleEngineContext [{}] was skipped because the extension [{}] is not included in the setup"", templateId, extensionName);
	line.clear();
}
"
                                     ;promotions-preview-context;promotions-preview-session;200;

UPDATE DroolsKIEBase;name[unique=true];defaultKIESession(name)
"#%beforeEach:
import de.hybris.platform.core.Registry;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.apache.commons.lang3.StringUtils;
import de.hybris.platform.util.Config;

Logger LOG = LoggerFactory.getLogger(""ImpExImportReader"");
extensionNames = Registry.getCurrentTenant().getTenantSpecificExtensionNames();
extensionName = ""promotionengineservices"";
if(!extensionNames.contains(extensionName))
{
	templateId = line.get(1);
	LOG.info(""DroolsKIEBase [{}] was skipped because the extension [{}] is not included in the setup"", templateId, extensionName);
	line.clear();
}
"
                    ;promotions-preview-base;promotions-preview-session

UPDATE DroolsKIEModule;name[unique=true];defaultKIEBase(name)
"#%beforeEach:
import de.hybris.platform.core.Registry;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.apache.commons.lang3.StringUtils;
import de.hybris.platform.util.Config;

Logger LOG = LoggerFactory.getLogger(""ImpExImportReader"");
extensionNames = Registry.getCurrentTenant().getTenantSpecificExtensionNames();
extensionName = ""promotionengineservices"";
if(!extensionNames.contains(extensionName))
{
	templateId = line.get(1);
	LOG.info(""DroolsKIEModule [{}] was skipped because the extension [{}] is not included in the setup"", templateId, extensionName);
	line.clear();
}
"
"#% afterEach: de.hybris.platform.core.Registry.getApplicationContext().getBean(""ruleEngineSystemSetup"").initializeModule(impex.getLastImportedItem());"
                      ;promotions-preview-module;promotions-preview-base

INSERT_UPDATE RuleEngineJob;code[unique=true];springId;
"#%beforeEach:
import de.hybris.platform.core.Registry;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.apache.commons.lang3.StringUtils;
import de.hybris.platform.util.Config;

Logger LOG = LoggerFactory.getLogger(""ImpExImportReader"");
extensionNames = Registry.getCurrentTenant().getTenantSpecificExtensionNames();
extensionName = ""promotionengineservices"";
if(!extensionNames.contains(extensionName))
{
	templateId = line.get(1);
	LOG.info(""RuleEngineJob [{}] was skipped because the extension [{}] is not included in the setup"", templateId, extensionName);
	line.clear();
}
"
                           ;rules -> Compilation and Publishing for [promotions-preview-module];ruleEngineCompilePublishJobPerformable;
                           ;rules -> Undeploy for [promotions-preview-module];ruleEngineUndeployJobPerformable;
                           ;rules -> Modules Sync from [promotions-preview-module] to [promotions-module];ruleEngineModuleSyncJobPerformable;
                           ;rules -> Module Init for [promotions-preview-module];ruleEngineModuleInitJobPerformable;